/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package db.access.tool.gui;

import db.access.tool.script.MainController;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author MECC
 */
public class MainGUI extends javax.swing.JFrame {

    /**
     * Creates new form ConnectGUI
     * @throws java.io.IOException
     */
   
    public static HashMap selectedData;
    
    public MainGUI() throws IOException {
        
        selectedData = new HashMap<String, String>();
        
        initComponents();
        getCRUDCheckBoxDisable();
        getDatabaseServerComboBox();
        getAdminComboBox();
        getAllRDListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jDialog1 = new javax.swing.JDialog();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        databaseServerComboBox = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        databaseComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        tabelComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        userComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        partialRD = new javax.swing.JRadioButton();
        allRD = new javax.swing.JRadioButton();
        simpanButton = new javax.swing.JButton();
        updateCB = new java.awt.Checkbox();
        selectCB = new java.awt.Checkbox();
        insertCB = new java.awt.Checkbox();
        deleteCB = new java.awt.Checkbox();
        jLabel6 = new javax.swing.JLabel();
        adminComboBox = new javax.swing.JComboBox<>();

        jScrollPane1.setViewportView(jEditorPane1);

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(45, 45, 25));

        jPanel2.setBackground(new java.awt.Color(195, 75, 10));

        jLabel1.setBackground(new java.awt.Color(225, 145, 15));
        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Database Server");

        databaseServerComboBox.setAutoscrolls(true);
        databaseServerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseServerComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(databaseServerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(databaseServerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(225, 145, 15));

        jLabel2.setBackground(new java.awt.Color(225, 145, 15));
        jLabel2.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(130, 16, 51));
        jLabel2.setText("Database");

        jLabel3.setBackground(new java.awt.Color(225, 145, 15));
        jLabel3.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(130, 16, 51));
        jLabel3.setText("Tabel");

        jLabel4.setBackground(new java.awt.Color(225, 145, 15));
        jLabel4.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(130, 16, 51));
        jLabel4.setText("Admin");

        userComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(225, 145, 15));
        jLabel5.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(130, 16, 51));
        jLabel5.setText("Hak Akses");

        partialRD.setBackground(new java.awt.Color(225, 145, 15));
        partialRD.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        partialRD.setForeground(new java.awt.Color(102, 102, 102));
        partialRD.setText("partial");
        partialRD.setToolTipText("");

        allRD.setBackground(new java.awt.Color(225, 145, 15));
        allRD.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        allRD.setForeground(new java.awt.Color(102, 102, 102));
        allRD.setText("All");
        allRD.setToolTipText("");
        allRD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRDActionPerformed(evt);
            }
        });

        simpanButton.setBackground(new java.awt.Color(195, 75, 10));
        simpanButton.setText("Simpan");
        simpanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanButtonActionPerformed(evt);
            }
        });

        updateCB.setLabel("update");

        selectCB.setLabel("select");

        insertCB.setLabel("insert");

        deleteCB.setLabel("delete");

        jLabel6.setBackground(new java.awt.Color(225, 145, 15));
        jLabel6.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(130, 16, 51));
        jLabel6.setText("User");

        adminComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(databaseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tabelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(partialRD)
                        .addGap(18, 18, 18)
                        .addComponent(allRD))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(adminComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(insertCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(simpanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(deleteCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(databaseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tabelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(simpanButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(adminComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(partialRD)
                            .addComponent(allRD))
                        .addGap(5, 5, 5)
                        .addComponent(selectCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insertCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 41, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userComboBoxActionPerformed

    private void simpanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanButtonActionPerformed
        try {
            // TODO add your handling code here:
            String status = MainController.validateData(selectedData);
            
            //System.out.println(status);
            //System.out.println("The data -->> "+selectedData);
        } catch (SQLException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_simpanButtonActionPerformed

    private void allRDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allRDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allRDActionPerformed

    private void databaseServerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseServerComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_databaseServerComboBoxActionPerformed

    private void adminComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adminComboBoxActionPerformed
    
    public void getAdminComboBox() throws IOException{
        
        String[] fillers = MainController.getListAdmin();
        
        DefaultComboBoxModel model = new DefaultComboBoxModel(fillers);
        adminComboBox.setModel( model );
        ActionListener adminCBListener = new ActionListener() {
        @Override
            public void actionPerformed(ActionEvent e) {
                String value = String.valueOf(adminComboBox.getSelectedItem());
                selectedData.put("admin", value);
            }
        };
        adminComboBox.addActionListener(adminCBListener);
        
    }
    
    public void getDatabaseServerComboBox() throws IOException{
        
        String[] fillers = MainController.getListDatabaseServer();
        
        DefaultComboBoxModel model = new DefaultComboBoxModel(fillers);
        databaseServerComboBox.setModel( model );
        ActionListener databaseServerCBListener = new ActionListener() {
        @Override
            public void actionPerformed(ActionEvent e) {
            try {
                //System.out.println(databaseServerComboBox.getSelectedItem());
                String value = String.valueOf(databaseServerComboBox.getSelectedItem());
                selectedData.put("host", value);
                getDatabaseComboBox(value);
            } catch (IOException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        };
        databaseServerComboBox.addActionListener(databaseServerCBListener);
        
    }
    
    public void getDatabaseComboBox(final String selectedServer) throws IOException, SQLException{
        
        
        String[] fillers = MainController.getDatabaseList(selectedServer);
        
        DefaultComboBoxModel model = new DefaultComboBoxModel(fillers);
        databaseComboBox.setModel( model );
        
        ActionListener databaseCBListener = new ActionListener() {
        @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    String data = String.valueOf(databaseComboBox.getSelectedItem());
                    getTabelComboBox(data);
                    selectedData.put("database", data);
                }    
                catch (SQLException ex) {
                    Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        databaseComboBox.addActionListener(databaseCBListener);
        
    }
    
    public void getTabelComboBox(String selectedDatabase) throws SQLException, IOException{
        
        String[] fillers = MainController.getTableList(selectedDatabase);
        
        DefaultComboBoxModel model = new DefaultComboBoxModel(fillers);
        tabelComboBox.setModel( model );
         ActionListener tabelCBListener = new ActionListener() {
        @Override
            public void actionPerformed(ActionEvent e) {
                String selectedTable = String.valueOf(tabelComboBox.getSelectedItem());
                selectedData.put("table", selectedTable);
                System.out.println(tabelComboBox.getSelectedItem());
                getUserComboBox();
            }
        };
        tabelComboBox.addActionListener(tabelCBListener);
        
    }
    
    public void getUserComboBox(){
        
        String[] fillers = MainController.getUserList();
        
        DefaultComboBoxModel model = new DefaultComboBoxModel(fillers);
        userComboBox.setModel( model );
         ActionListener userCBListener = new ActionListener() {
        @Override
            public void actionPerformed(ActionEvent e) {
                String data = String.valueOf(userComboBox.getSelectedItem());
                selectedData.put("user", data);
                System.out.println(selectedData);
               
            }
        };
        userComboBox.addActionListener(userCBListener);
    }
    
    
    public void getAllRDListener(){
        
         
        ItemListener objIListener = new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
               
               Object source = e.getItemSelectable();
               String getItemSelected = "";
               String[] CRUDList = {"select", "insert", "update", "delete"};
               
               ButtonGroup rdGroup = new ButtonGroup();
               
               rdGroup.add(partialRD);
               /*CRUDgroup.add(insertRD);
               CRUDgroup.add(updateRD);
               CRUDgroup.add(deleteRD);*/
               rdGroup.add(allRD);
               
               if (source == partialRD) {
                   
                   if(selectedData.containsKey("all")){
                       selectedData.remove("all");
                   }
                   
                   getCRUDCheckBoxListener();
                   
               } 
               else if (source == allRD) {
                   
                   getCRUDCheckBoxDisable();
                   for(String field: CRUDList){
                       if(selectedData.containsKey(field)){
                           selectedData.remove(field);
                       }
                   }
                   selectedData.put("all", "all");
                }
                System.out.println(selectedData);
                
                
            }
        };
        
        partialRD.addItemListener(objIListener);
        allRD.addItemListener(objIListener);

    }
    
    public void getCRUDCheckBoxListener(){
        getCRUDCheckBoxEnable();
        ItemListener objCBListener = new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                
                
                 //Object source = e.getItem(); 
                 Object source = e.getItemSelectable();
                 Object source2 = e.getStateChange();
                 
                 if(source == selectCB ){
                     if(source2.toString().matches("1")){
                         selectedData.put("select", "select");
                         //System.out.println("done!!!");
                     }
                     else if(source2.toString().matches("2")){
                         selectedData.remove("select");
                         //System.out.println("Busted!!");
                     }
                 }
                 else if( source == insertCB){
                     if(source2.toString().matches("1")){
                         selectedData.put("insert", "insert");
                     }
                     else if(source2.toString().matches("2")){
                         selectedData.remove("insert");
                     }
                 }
                 else if( source == updateCB){
                     if(source2.toString().matches("1")){
                         selectedData.put("update", "update");
                     }
                     else if(source2.toString().matches("2")){
                         selectedData.remove("update");
                     }
                 }
                 else if( source == deleteCB){
                     if(source2.toString().matches("1")){
                         selectedData.put("delete", "delete");
                     }
                     else if(source2.toString().matches("2")){
                         selectedData.remove("delete");
                     }
                 }
                 //System.out.println(source.toString()+" || "+source2.toString());
            }
            
        };
        
        selectCB.addItemListener(objCBListener);
        insertCB.addItemListener(objCBListener);
        updateCB.addItemListener(objCBListener);
        deleteCB.addItemListener(objCBListener);
    }
    
    public void getCRUDCheckBoxDisable(){
        
        /*JComboBox[] cbFields = {selectCB, insertCB, updateCB, deleteCB};
        
        for(Object fields : cbFields){
           selectCB.setState(false);
        }*/
        
        selectCB.setState(false);
        insertCB.setState(false);
        updateCB.setState(false);
        deleteCB.setState(false);
        selectCB.setEnabled(false);
        insertCB.setEnabled(false);
        updateCB.setEnabled(false);
        deleteCB.setEnabled(false);
    }
    
    public void getCRUDCheckBoxEnable(){
        selectCB.setEnabled(true);
        insertCB.setEnabled(true);
        updateCB.setEnabled(true);
        deleteCB.setEnabled(true);
    }
    
   
                
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                try {
                    new MainGUI().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                try {
                    MainGUI obj = new MainGUI();
                } catch (IOException ex) {
                    Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> adminComboBox;
    private javax.swing.JRadioButton allRD;
    private javax.swing.JComboBox<String> databaseComboBox;
    public javax.swing.JComboBox<String> databaseServerComboBox;
    private java.awt.Checkbox deleteCB;
    private java.awt.Checkbox insertCB;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton partialRD;
    private java.awt.Checkbox selectCB;
    private javax.swing.JButton simpanButton;
    private javax.swing.JComboBox<String> tabelComboBox;
    private java.awt.Checkbox updateCB;
    private javax.swing.JComboBox<String> userComboBox;
    // End of variables declaration//GEN-END:variables
}
